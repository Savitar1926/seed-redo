{"remainingRequest":"/Users/daryl/Pictures/seed/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/daryl/Pictures/seed/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/daryl/Pictures/seed/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/daryl/Pictures/seed/src/sections/05_SimpleForEveryone.vue?vue&type=template&id=3e44f420&scoped=true&","dependencies":[{"path":"/Users/daryl/Pictures/seed/src/sections/05_SimpleForEveryone.vue","mtime":1649334265906},{"path":"/Users/daryl/Pictures/seed/node_modules/cache-loader/dist/cjs.js","mtime":1649334279165},{"path":"/Users/daryl/Pictures/seed/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1649334279873},{"path":"/Users/daryl/Pictures/seed/node_modules/cache-loader/dist/cjs.js","mtime":1649334279165},{"path":"/Users/daryl/Pictures/seed/node_modules/vue-loader/lib/index.js","mtime":1649334279683}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}